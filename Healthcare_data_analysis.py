# -*- coding: utf-8 -*-
"""DATA SCIENCE CAPSTONE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g0ur_10vu-m2qI4Ctb9qTczv9cKWk8WQ
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

! ls

"""**EXPLORATORY DATA ANALYSIS**"""





from google.colab import drive
drive.mount('/content/drive')

df_train=pd.read_csv("/content/drive/MyDrive/DATASCIENCE_CAPSTONE/Project2/train.csv")

df_healthcare=pd.read_csv("/content/drive/MyDrive/DATASCIENCE_CAPSTONE/Project2/HealthcareDiabetes/healthcare_diabetes.csv")

df_healthcare.head()

df_train.head()

df_train.columns

df_healthcare.columns

"""# **Exploring the healthcare variables from healthcare dataset**

***Distribution of glucose levels among various patients***
"""

import matplotlib.pyplot as plt
#df_healthcare.loc[df_healthcare['Glucose'] != 0] 
plt.hist(df_healthcare['Glucose'])
plt.xlabel ("Plasma Glucose mg/dL")
plt.ylabel ("Number of people")
plt.title("Plasma Glucose levels in Oral glucose tolerance test")

"""***Distribution of  Blood pressure values in various patients***"""

import matplotlib.pyplot as plt
#df_healthcare.loc[df_healthcare['BloodPressure'] != 0] 
plt.hist(df_healthcare['BloodPressure'])
plt.xlabel ("BloodPressure")
plt.ylabel ("Number of people")
plt.title("Distribution of BloodPressure values in various patients")

"""***Distribution of BMI levels in various patients***"""

import matplotlib.pyplot as plt
#df_healthcare.loc[df_healthcare['BMI'] != 0] 
plt.hist(df_healthcare['BMI'])
plt.xlabel ("BMI")
plt.ylabel ("Number of people")
plt.title("Distribution of BMI")

"""***Distribution of Skin Fold Thickness levels in various patients::***"""

import matplotlib.pyplot as plt
#df_healthcare.loc[df_healthcare['SkinThickness'] != 0] 
plt.hist(df_healthcare['SkinThickness'])
plt.xlabel ("SkinThickness")
plt.ylabel ("Number of people")
plt.title("Distribution of SkinThickness")

import matplotlib.pyplot as plt
#df_healthcare.loc[df_healthcare['Insulin'] != 0] 
plt.hist(df_healthcare['Insulin'])
plt.xlabel ("Insulin")
plt.ylabel ("Number of people")
plt.title("Distribution of Insulin levels ")

import matplotlib.pyplot as plt
#df_healthcare.loc[df_healthcare['Age'] != 0] 
plt.hist(df_healthcare['Age'])
plt.xlabel ("Age")
plt.ylabel ("Number of people")
plt.title("Distribution of Age among various patients ")

"""**Finding Number of zero entries in healthcare dataset**"""

df_healthcare.eq(0).sum()

"""**Imputing mean/median value inplace of zero values for Glucose,BP,SkinThickness, Insulin and BMI levels**

"""

median_glucose,median_BloodPressure,median_SkinThickness,median_Insulin,median_BMI= df_healthcare.Glucose.median(),df_healthcare.BloodPressure.median(),df_healthcare.SkinThickness.median(),df_healthcare.Insulin.mean(),df_healthcare.BMI.median()
df_healthcare.Glucose.replace(0,median_glucose,inplace = True)
df_healthcare.BloodPressure.replace(0,median_BloodPressure,inplace = True)
df_healthcare.SkinThickness.replace(0,median_SkinThickness,inplace = True)
df_healthcare.Insulin.replace(0,median_Insulin,inplace = True)
df_healthcare.BMI.replace(0,median_BMI,inplace = True)

"""**Checking the values for healthcare parameters after imputation**"""

df_healthcare.eq(0).sum()

"""# **Exploring the variables from train dataset**

---


"""

df_train.shape,df_healthcare.shape

"""**Treating zero values for  'Age' by imputing mean/median values**



"""

X1=[]
for i  in range (len(df_train_zero)-1):
  X1.append(df_train_zero[i])
print(X1)

mean_age=df_train.Age.mean()
df_train.Age.replace(0,mean_age,inplace=True)
df_train.Age.eq(0).sum()

"""**Chekcing number of zero value entries for various columns in train dataset**"""

df_train.eq(0).sum()

"""**Writing the healthcare data set into a spreadsheet after imputation**"""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
import gspread
from oauth2client.client import GoogleCredentials

from google.colab import auth
auth.authenticate_user()
import gspread

from google.colab import auth
auth.authenticate_user()

import gspread
from google.auth import default
creds, _ = default()

gc = gspread.authorize(creds)

health = df_healthcare.to_numpy().tolist()
print(health)

headers = df_healthcare.columns.to_list()

health_data = [headers] + health
print(health_data)

wb = gc.open_by_key('1EYQ7gDs00YXjXvsM2ejc2MGGy4IYBl-8cbZ3nPIj1Dc')

!pip install --upgrade gspread

wsdata = wb.worksheet('updated_data')

wsdata.update(None,health_data)



"""## **Frequency Plot for the different variables**"""

import seaborn as sns

sns.displot(df_healthcare, x="Glucose",bins =20 )

sns.displot(df_healthcare, x="BloodPressure")

sns.displot(df_healthcare, x="BMI")

sns.displot(df_healthcare, x="Insulin",bins =10 )

sns.displot(df_healthcare, x="SkinThickness",bins =20 )

sns.displot(df_healthcare, x="Age",bins =20 )

"""# ***Checking the balance of the data by plotting the count of outcomes by their value. ***"""

sns.displot(df_healthcare, x="Outcome" )

"""# **Creating scatter charts between the pair of variables**"""

sns.pairplot(df_healthcare, hue = 'Outcome',markers=['o','s'],corner = "True")

"""## **Correlation Analysis of healthcare variables**

"""

df_healthcare.corr()

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize = (10,10))
sns.heatmap(df_healthcare.corr(),annot=True, cmap='Blues')

df_Diabetic=pd.DataFrame(df_healthcare.loc[df_healthcare['Outcome'] == 1])



df_Diabetic.head()

df_Diabetic.shape

df_Diabetic.corr()

plt.figure(figsize = (10,10))
sns.heatmap(df_Diabetic.corr(),annot = True, cmap ='Blues')

plt.hist(df_Diabetic['Insulin'])
plt.xlabel ("Insulin levels")
plt.ylabel ("Number of people")
plt.title("Two hour serum insulin levels in diabetic patients")

plt.hist(df_Diabetic['Age'])
plt.xlabel ("Age in years")
plt.ylabel ("Number of people")
plt.title("Age of diabetic patients ")

plt.hist(df_Diabetic['BMI'])
plt.xlabel ("BMI")
plt.ylabel ("Number of people")
plt.title("BMI of diabetic patients ")

plt.hist(df_healthcare['Outcome'])

print(sum(df_healthcare['Outcome']==1))
#>> print(sum(df_healthcare['Students'] >= 20))/'

from sklearn.linear_model import LogisticRegression
from sklearn import svm

from sklearn.metrics import confusion_matrix,classification_report,roc_auc_score,roc_curve

X = df_healthcare.drop('Outcome',axis = 1)

y = df_healthcare['Outcome']
print(X.columns)

df_healthcare.columns

from sklearn.model_selection import train_test_split
X_train,Xval,y_train,yval = train_test_split(X,y,test_size=0.2,random_state =42)

"""**Modeling using Logistic Regression**"""

model_log = LogisticRegression()

model_log.fit(X_train,y_train)

y_pred = model_log.predict(Xval)
print(classification_report(yval,y_pred))
print("ROC_AUC score from logistic regression model is",roc_auc_score(yval,y_pred))
print(confusion_matrix(yval,y_pred))

"""**Modeling using Support Vector Machines**"""

model_svm = svm.SVC()

model_svm.fit(X_train,y_train)

y_svm_pred = model_svm.predict(Xval)
print(classification_report(yval,y_svm_pred))
print("ROC_AUC score from svm model is",roc_auc_score(yval,y_svm_pred))
print(confusion_matrix(yval,y_svm_pred))

"""**Modeling using Naive Bayes**"""

from sklearn.naive_bayes import GaussianNB
model_nb = GaussianNB()

model_nb.fit(X_train,y_train)

y_nb_pred=model_nb.predict(Xval)
print(classification_report(yval,y_nb_pred))
print("ROC_AUC score for naive bayes is",roc_auc_score(yval,y_nb_pred))
print(confusion_matrix(yval,y_nb_pred))

"""**Modeling using Stochastic Gradient Desccent Classifier**"""

from sklearn.linear_model import SGDClassifier
model_sgd = SGDClassifier(loss='modified_huber',shuffle=True,random_state=101)

model_sgd.fit(X_train,y_train)

y_sgd_pred=model_sgd.predict(Xval)
print(classification_report(yval,y_sgd_pred))
print("ROC_AUC score for SGD Classifier is",roc_auc_score(yval,y_sgd_pred))
print(confusion_matrix(yval,y_sgd_pred))

"""**Modeling using K Nearest Neighbors**"""

from sklearn.neighbors import KNeighborsClassifier



model_knn = KNeighborsClassifier(n_neighbors=15)

model_knn.fit(X_train,y_train)

y_knn_pred = model_knn.predict(Xval)

print(classification_report(yval,y_knn_pred))
print("ROC_AUC score from KNN model is",roc_auc_score(yval,y_knn_pred))
print(confusion_matrix(yval,y_knn_pred))

"""**Modeling using Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier

model_tree = DecisionTreeClassifier(max_depth = 5 ,min_samples_leaf=5 ,random_state =42,max_features=None)

model_tree.fit(X_train,y_train)

y_tree_pred = model_tree.predict(Xval)
print(classification_report(yval,y_tree_pred))
print("ROC_AUC score from decision tree model is",roc_auc_score(yval,y_tree_pred))
print(confusion_matrix(yval,y_tree_pred))



